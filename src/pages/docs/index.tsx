import type { NextPage, NextPageContext } from 'next'
// import Head from 'next/head'
import { useAppSelector, useAppDispatch } from "../../../src/reduxtoolkit/hooks"
import { setTOC, setTOCHtml } from 'src/reduxtoolkit/tocSlice';
import { useEffect } from 'react'
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import rehypeRaw from "rehype-raw";
import rehypeSanitize from "rehype-sanitize";
import rehypeStringify from "rehype-stringify";
import { githubURL } from "@components/Helpers/GlobalVariables.js";
import { AddTitleCssToH1, addTitleOfImageFromAlt, ChangeLinks, getNodeTree, getTOCList, loadGitbookAssets } from '@components/Helpers/functions';
import { Container } from '@chakra-ui/react';
import Head from 'next/head';
import Layout from '@components/Layout';
import { setContent, setCurrentUrl } from '@reduxtoolkit/bodySlice';

export async function getServerSideProps({ req }: NextPageContext) {
  let githubMarkDownContent = await (await fetch(`${githubURL}SUMMARY.md`)).text()
  var toc_html: string = ""
  await unified()
    .use(remarkParse)
    // add any remark plugins here
    .use(remarkRehype, { allowDangerousHtml: true })
    // add any rehype plugins here
    .use(rehypeRaw)
    .use(rehypeSanitize)
    .use(rehypeStringify)
    .process(githubMarkDownContent)
    .then(
      (htmlfile) => {
        toc_html = AddTitleCssToH1(ChangeLinks(htmlfile.value.toString()));
        // tocList = htmlfile.value.toString();
      }
    )
    .catch((err) => { });

  const bodyUrl = `https://raw.githubusercontent.com/babyloniaapp/docs/main/README.md`;
  let bodyContentMd = await (await fetch(`${bodyUrl}`)).text()
  let bodyContent = ""
  await unified()
    .use(remarkParse)
    // add any remark plugins here
    .use(remarkRehype, { allowDangerousHtml: true })
    // add any rehype plugins here
    .use(rehypeRaw)
    .use(rehypeSanitize)
    .use(rehypeStringify)
    .process(bodyContentMd)
    .then(
      (htmlfile: any) => {
        bodyContent = addTitleOfImageFromAlt(loadGitbookAssets(htmlfile.value.toString()));
      }
    )
    .catch((err: any) => {
      console.log(err)
    });
  return {
    props: {
      toc: getTOCList(toc_html),// AddTitleCssToH1(ChangeLinks(tocList)),
      tocHtml: toc_html,
      body: bodyContent,
      currentUrl: ""
    },
  }
}

type TProps = {
  toc: [],
  tocHtml: string,
  body: string,
  currentUrl: string
};

type TTocItem = {
  address: string,
  title: string
}

const Home: NextPage<TProps> = ({ toc, tocHtml, body, currentUrl }) => {
  const dispatch = useAppDispatch()
  // const toclist = useAppSelector((state: any) => state.toc.items);
  useEffect(() => {
    dispatch(setTOC(toc))
    dispatch(setTOCHtml(tocHtml))
    dispatch(setContent(body))
    dispatch(setCurrentUrl(currentUrl))

  }, [toc, dispatch])

  return (

    <Container
      maxW=".xl"
      bg="black.900"
      pt="0"
      pb="0"
      pl="0"
      pr="0"
      w="100vw"
      h="100vh"
    // mt={["88px", "88px", "124px"]}
    // h="80vh"
    >
      <Head>
        <title>Docs</title>
        <meta name="description" content="Documentation of Babylonia" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <p>Main</p> */}

      <div>
        {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}

        {/* {toclist && toclist.map((i: any, key: any) => (
          <div key={key}>
            <p >{i.address.toString()} </p>
            <p >{i.title.toString()} </p> <p>------------------------------------------------------------</p>
          </div>
        )
        )} */}

      </div >

      <Layout />

    </Container>
  )
}

export default Home